import { test, expect, chromium } from '@playwright/test';
import { time } from 'console';


/* –ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ—Å—Ç 

1) goto https://demo.learnwebdriverio.com/
2) –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –ø—ñ–¥ —é–∑–µ—Ä–æ–º (—è–∫–æ–≥–æ –≤–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ –≤ —Ä—É—á–Ω—É —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)  yulkatest yulkatext159
3) –ü–µ—Ä–µ—Ö–æ–¥—å—Ç–µ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É New Article 
4) –°—Ç–≤–æ—Ä—ñ—Ç—å –ê—Ä—Ç—ñ–∫–ª (–∑–∞–ø–æ–≤–Ω—é–π—Ç–µ –≤—Å—ñ –ø–æ–ª—è) 
5) –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–æ –∞—Ä—Ç—ñ–∫–ª —Å—Ç–≤–æ—Ä–∏–≤—Å—è 

–í–ò–ö–û–†–ò–°–¢–û–í–£–ô–¢–ï –õ–ò–®–ï XPATH –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
—à–ø–∞—Ä–≥–∞–ª–∫–∞ –ø–æ XPATH: https://github.com/qa-senpai/test-automation-example/blob/main/cheat-sheets/xpath.md */

test('LWB-000 Test adding article', async () => {

  const articleNameText = "My First Article";
  const articleDescText = "My First Article Description";
  const articleLongDescText = "My First Article Description Playwright Demo";
  const articleTagText = "Playwright";
  const emailText = "yulka001@test.com";
  const pwdText = "yulka001";

  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();

  const signInLink = page.locator('//a[contains(text(), "Sign in")]');
  const pwdInput = page.locator('//input[@type="password"]');
  const emailInput = page.locator('//input[@type="email"]');
  const signInBtn = page.locator('//button[contains(text(), "Sign in")]');

  await page.goto('https://demo.learnwebdriverio.com/', { waitUntil: 'networkidle' });

  await signInLink.click();
  await emailInput.fill(emailText);
  await pwdInput.fill(pwdText);
  await signInBtn.click();

  await page.locator('//a[contains(text(), "New Article")]').click();
  await page.locator('//input[@data-qa-id="editor-title"]').fill(articleNameText);
  await page.locator('//input[@data-qa-id="editor-description"]').fill(articleDescText);
  await page.locator('//textarea[contains(@class, "auto-textarea-input")]').fill(articleLongDescText);
  await page.locator('//*[@data-qa-id="editor-tags"]').fill(articleTagText);
  await page.locator('//*[@data-qa-id="editor-publish"]').click();

  await expect(page.locator('//*[@data-qa-id="article-title"]')).toContainText(articleNameText);

  //await page.waitForTimeout(2000);
});


/* 1. –ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º  
1. –ó–Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ conduit.  
2. –ó–Ω–∞–π—Ç–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è Home.  
3. –ó–Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É Sign in.  
4. –ó–Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç A place to share your knowledge..  

 */

test('LWB-001 Test searching elements by text article', async () => {

  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();

  const signInText = "Sign in";
  const signInBtn = page.locator('//a[contains(text(), "Sign in")]');
  const headerText = "conduit";
  const headerLocator = page.locator('//h1[contains(text(), "conduit")]');
  const homeNavMenuText = "Home";
  const homeNavMenuLocator = page.locator('//a[contains(text(), "Home")]');
  const paragraphText = "A place to share your knowledge.";
  const paragraphLocator = page.locator('//p[contains(text(), "A place to share your knowledge.")]');

  await page.goto('https://demo.learnwebdriverio.com/', { waitUntil: 'networkidle' });

  await expect(headerLocator).toContainText(headerText);
  await expect(homeNavMenuLocator).toContainText(homeNavMenuText);
  await expect(signInBtn).toContainText(signInText);
  await expect(paragraphLocator).toContainText(paragraphText);
});

/*  2. –ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑–∞ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏  
5. –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–∞–≤–∞—Ç–∞—Ä–∏).  
6. –ó–Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É Global Feed –∑–∞ –∫–ª–∞—Å–æ–º.  
7. –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —É–ª—é–±–ª–µ–Ω—ñ ‚ù§Ô∏è (heart icon).  
8. –ó–Ω–∞–π—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ –∞—Ç—Ä–∏–±—É—Ç–æ–º href="/register".  
9. –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ –∫–ª–∞—Å–æ–º tag-pill.  
*/

test('LWB-002 Test searching elements by attributes', async () => {

  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();

  const avatarsIcons = page.locator('img[@data-qa-type="author-avatar"]');
  const globalFeedTab = page.locator('//a[contains(@class, "nav-link") and contains(text(),"Global Feed")]');
  const likeBtns = page.locator('//button[@data-qa-type="article-favorite"]');
  const signUpBtn = page.locator('//a[@href="/register"]');
  const tagsBtns = page.locator('//li[contains(@class,"tag-pill")]');

  await page.goto('https://demo.learnwebdriverio.com/', { waitUntil: 'networkidle' });

  await expect(avatarsIcons).toBeVisible;
  await expect(globalFeedTab).toBeVisible;
  await expect(likeBtns).toBeVisible;
  await expect(signUpBtn).toBeVisible;
  await expect(tagsBtns).toBeVisible;
});

/* 3. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è `contains()`  

10. –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, —Ç–µ–∫—Å—Ç —è–∫–∏—Ö –º—ñ—Å—Ç–∏—Ç—å *Read more*.  
11. –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ —Ç–µ–≥–∏ <a> –∑ –∫–ª–∞—Å–æ–º, —â–æ –º—ñ—Å—Ç–∏—Ç—å *router-link*.  
12. –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ –∑ –∫–ª–∞—Å–æ–º, —â–æ –º—ñ—Å—Ç–∏—Ç—å *btn-outline-primary*.  

*/

test('LWB-003 Test searching using contains', async () => {

  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();

  const readMoreBtns = page.locator('//span[contains(text(), "Read more...")]');
  const routerLink = page.locator('//a[contains(@class, "router-link")]');
  const btnsOutlinePrm = page.locator('//button[contains(@class, "btn-outline-primary")]');


  await page.goto('https://demo.learnwebdriverio.com/', { waitUntil: 'networkidle' });

  await expect(readMoreBtns).toBeVisible;
  await expect(routerLink).toBeVisible;
  await expect(btnsOutlinePrm).toBeVisible;
});

/*
üìå 4. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è `starts-with()`  

13. –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, —É —è–∫–∏—Ö href –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ /articles.  

*/

test('LWB-004 Test searching using starts-with()', async () => {

  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();

  const articles = page.locator('//*[starts-with(@href, "/articles")]');

  await page.goto('https://demo.learnwebdriverio.com/', { waitUntil: 'networkidle' });

  await expect(articles).toBeVisible;
});

/*
üìå 5. –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–æ DOM (child, parent, sibling)  

14. –ó–Ω–∞–π—Ç–∏ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π <div> –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –∞–≤—Ç–æ—Ä–∞.  
15. –ó–Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—Ç—ñ ("Test") –ø—ñ—Å–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –∞–≤—Ç–æ—Ä–∞.  
16. –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –¥–æ—á—ñ—Ä–Ω—ñ <a> –≤ <ul> –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.  
17. –ó–Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –±—Ä–∞—Ç–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –±–∞–Ω–µ—Ä–∞ (.banner).  
18. –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ div –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ <div class="home-global">.  

//div[@class="home-global"]/div
*/

test('LWB-005 Test searching using DOM', async () => {

  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();

  const avararsParentDiv = page.locator('//img[@data-qa-type="author-avatar"]/parent::a/parent::div');
  const articleTitle = page.locator('//a[@class="preview-link"]/descendant::h1');
  const aInUl = page.locator('//ul/descendant::a');
  const bannerFirstSibling = page.locator("//div[@class='banner']/following-sibling::*[1]");
  const divs = page.locator('//div[@class="home-global"]/div');

  await page.goto('https://demo.learnwebdriverio.com/', { waitUntil: 'networkidle' });

  await expect(avararsParentDiv).toBeVisible;
  await expect(articleTitle).toBeVisible;
  await expect(aInUl).toBeVisible;
  await expect(bannerFirstSibling).toBeVisible;
  await expect(divs).toBeVisible;
});

/*  6. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è `normalize-space()` —Ç–∞ `text()`  

19. –ó–Ω–∞–π—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è *Sign up* –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏ –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º.  
20. –ó–Ω–∞–π—Ç–∏ <span> –∑ —Ç–µ–∫—Å—Ç–æ–º demo —É –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Ç–µ–≥–∞—Ö.  

*/

test('LWB-006 Test searching using `normalize-space()` —Ç–∞ `text()', async () => {

  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();

  const signUpLink = await page.locator('//a[normalize-space(text())="Sign up"]');
  const demoSpan = await page.locator('//span[normalize-space(text())="demo"]');

  await page.goto('https://demo.learnwebdriverio.com/', { waitUntil: 'networkidle' });

  await expect(signUpLink).toBeVisible;
  await expect(demoSpan).toBeVisible;
});

/* 7. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ª–æ–≥—ñ—á–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ (`AND`, `OR`)  

21. –ó–Ω–∞–π—Ç–∏ <button> –∑ –∫–ª–∞—Å–æ–º btn-outline-primary —ñ –∞—Ç—Ä–∏–±—É—Ç–æ–º data-qa-type.  
22. –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ <a> –∑ –∫–ª–∞—Å–æ–º tag-pill –∞–±–æ —Ç–µ–∫—Å—Ç–æ–º testing.  
*/

test('LWB-007 Test searching using `AND` —Ç–∞ `OR', async () => {

  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();

  const buttons = await page.locator('//button[contains(@class, "btn-outline-primary") and @data-qa-type]');
  const tagsBtns = page.locator('//li[contains(@class,"tag-pill") or contains(text(), "testing")]');

  await page.goto('https://demo.learnwebdriverio.com/', { waitUntil: 'networkidle' });

  await expect(buttons).toBeVisible;
  await expect(tagsBtns).toBeVisible;
});

/* 8. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (`not()`)  

23. –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏, —è–∫—ñ –Ω–µ –º–∞—é—Ç—å –∫–ª–∞—Å—É btn-outline-primary.  

 */

test('LWB-008 Test searching using `not', async () => {

  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();

  const btns = await page.locator('//button[not(contains(@class, "btn-outline-primary"))]');

  await page.goto('https://demo.learnwebdriverio.com/', { waitUntil: 'networkidle' });

  await expect(btns).toBeVisible;
});
