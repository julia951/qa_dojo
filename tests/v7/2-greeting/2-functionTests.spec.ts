
import { test, expect } from '@playwright/test';
import { greeting } from './2-function';

const morningGreeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!";
const dayGreeting = "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è!";
const eveningGreeting = "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞!";
const errorMsg = "–ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≥–æ–¥–∏–Ω–∏. –ú–∞—î –±—É—Ç–∏ –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –≤—ñ–¥ 0 –¥–æ 23.";

test('11 check', async () => {
  const result = greeting(11); 
  expect(result).toBe(morningGreeting); 
});

test('12 check', async () => {
  const result = greeting(12); 
  expect(result).toBe(dayGreeting); 
});

test('13 check', async () => {
  const result = greeting(13); 
  expect(result).toBe(dayGreeting); 
});

test('17 check', async () => {
  const result = greeting(17); 
  expect(result).toBe(dayGreeting); 
});

test('18 check', async () => {
  const result = greeting(18); 
  expect(result).toBe(eveningGreeting); 
});

test('19 check', async () => {
  const result = greeting(19); 
  expect(result).toBe(eveningGreeting); 
});

test('0 check', async () => {
  const result = greeting(0); 
  expect(result).toBe(errorMsg); 
});

test('1 check', async () => {
  const result = greeting(1); 
  expect(result).toBe(morningGreeting); 
});

test('24 check', async () => {
  const result = greeting(24); 
  expect(result).toBe(errorMsg); 
});


/* 3Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Ü—ñ–Ω–∫–∏
üìö –Ø–∫—â–æ –±–∞–ª >= 50 ‚Äî "–¢–µ—Å—Ç —Å–∫–ª–∞–¥–µ–Ω–æ". –Ø–∫—â–æ < 50 ‚Äî "–¢–µ—Å—Ç –Ω–µ —Å–∫–ª–∞–¥–µ–Ω–æ".

4Ô∏è‚É£ –í—ñ–∫ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
üó≥ –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–æ–∂–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏.
–í—Ö—ñ–¥: –í—ñ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 17)
–í–∏—Ö—ñ–¥:
–Ø–∫—â–æ >= 18: "–í–∏ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏."
–Ü–Ω–∞–∫—à–µ: "–í–∏ —â–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏."
 */

/* 5Ô∏è‚É£ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —á–∏—Å–µ–ª
‚öñÔ∏è –ü–æ—Ä—ñ–≤–Ω—è–π—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞: –≤–∏–≤–µ–¥—ñ—Ç—å –±—ñ–ª—å—à–µ, –∞–±–æ –ø–æ–≤—ñ–¥–æ–º—Ç–µ, —â–æ —á–∏—Å–ª–∞ —Ä—ñ–≤–Ω—ñ.
–í—Ö—ñ–¥: –î–≤–∞ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 8 —ñ 10)
–í–∏—Ö—ñ–¥:
"–ü–µ—Ä—à–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ."
"–î—Ä—É–≥–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ."
"–ß–∏—Å–ª–∞ —Ä—ñ–≤–Ω—ñ."
 */

/* 6Ô∏è‚É£ –î–æ—Ä–æ–≥–∞ —ñ —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä
üö¶ –Ø–∫—â–æ –∑–µ–ª–µ–Ω–∏–π ‚Äî –ø–µ—Ä–µ—Ö–æ–¥—å—Ç–µ. –ñ–æ–≤—Ç–∏–π ‚Äî –ø—ñ–¥–≥–æ—Ç—É–π—Ç–µ—Å—è. –ß–µ—Ä–≤–æ–Ω–∏–π ‚Äî –∑–∞—á–µ–∫–∞–π—Ç–µ. */

/* 7Ô∏è‚É£ –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É —á–∏—Å–ª–∞
‚ûï‚ûñ –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ –≤–∏–∑–Ω–∞—á–∞—î, —á–∏ —á–∏—Å–ª–æ –¥–æ–¥–∞—Ç–Ω—î, –≤—ñ–¥‚Äô—î–º–Ω–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é.
–í—Ö—ñ–¥: –ß–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, -5)
–í–∏—Ö—ñ–¥:
"–ß–∏—Å–ª–æ –¥–æ–¥–∞—Ç–Ω—î."
"–ß–∏—Å–ª–æ –≤—ñ–¥‚Äô—î–º–Ω–µ."
"–ß–∏—Å–ª–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é." */


/* ‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è –ü—Ä–æ—Å—É–Ω—É—Ç–∏–π LVL 

–ù–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞ —Ü—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ Unit —Ç–µ—Å—Ç–∏  
=> –ø—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è 
import { test, expect } from "@playwright/test";

function isPositive(number) {
  if (typeof number === "number") {
    if (number > 0) {
      console.log("number is positive");
      return true;
    } else if (number === 0) {
      console.log("number is negative");
      return false;
    } else {
      console.log("number is negative");
      return false;
    }
  } else {
    throw Error("pls use number to check if it positive");
  }
}

// –ö–ª–∞—Å–∏ –µ–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
// positive
// negative
// zero

// –ì—Ä–∞–Ω–∏—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
// 1
// 0
// -1
// + –±–µ—Å–∫—ñ–Ω–µ—á–Ω—ñ—Å—Ç—å
// - –±–µ—Å–∫—ñ–Ω–µ—á–Ω—ñ—Å—Ç—å

test("is positive", async () => {
  const result = isPositive(1);
  expect(result).toBeTruthy();
});

test("is positive - max value", async () => {
  const result = isPositive(1.7976931348623157e308);
  expect(result).toBeTruthy();
});

test("is negative", async () => {
  const result = isPositive(-1);
  expect(result).toBeFalsy();
});

test("is negative - min value", async () => {
  const result = isPositive(-1.7976931348623157e308);
  expect(result).toBeFalsy();
}); */